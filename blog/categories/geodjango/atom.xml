<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: GeoDjango, | mattmakesmaps]]></title>
  <link href="http://mkgeomatics.github.io/blog/categories/geodjango/atom.xml" rel="self"/>
  <link href="http://mkgeomatics.github.io/"/>
  <updated>2013-04-30T23:25:01-07:00</updated>
  <id>http://mkgeomatics.github.io/</id>
  <author>
    <name><![CDATA[Matthew Kenny]]></name>
    <email><![CDATA[matthewkenny AT gmail DOT com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hack GeoDjango Admin with Mapquest Aerial Tiles]]></title>
    <link href="http://mkgeomatics.github.io/blog/2013/04/30/hack-geodjango-admin-with-mapquest-aerial-tiles/"/>
    <updated>2013-04-30T21:38:00-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2013/04/30/hack-geodjango-admin-with-mapquest-aerial-tiles</id>
    <content type="html"><![CDATA[<p>The <a href="http://geodjango.org/">GeoDjango model</a> admin provides a great <a href="http://openlayers.org/">OpenLayers</a> interface, allowing a user to create geographic features (points, lines, polygons) directly via a web map. Out-of-the-box,
GeoDjango ships with a base GeoAdmin class, using the default OL world borders layer,
as well as a subclass for OSM streets data. The OSM layer is great, and provides a good base
for most use cases. That being said, for <a href="https://github.com/mattmakesmaps/PntTrax">PntTrax</a>, I needed aerial tiles. My application deals
primarilly with the storage of field collected (GPS, field notes, aerial markup, etc.) data.
Our data occur primarilly in non-urban areas, where natural features provide a much
better context for orientation then would be expected with any streets layer, OSM or otherwise.
Mapquest provides a good set of aerial tiles, that can be easily integrated into OpenLayers.</p>

<p>It's easier to place a point on this:</p>

<p>{% img http://mattmakesmaps.com/images/2013-04-30/aerial.jpg 500 %}</p>

<p>Then this:</p>

<p>{% img http://mattmakesmaps.com/images/2013-04-30/osm.png 500 %}</p>

<p>Hacking the admin to display the <a href="http://developer.mapquest.com/web/products/open/map">Mapquest aerial tiles</a> is a pretty straightforward process.
From the gis contrib package, we'll modify <a href="https://github.com/django/django/blob/master/django/contrib/gis/admin/options.py">options.py</a> and its <a href="https://github.com/django/django/blob/master/django/contrib/gis/admin/__init__.py"><strong>init</strong>.py</a>, subclassing the OSMGeoAdmin. Within the <a href="https://github.com/django/django/tree/master/django/contrib/gis/templates/gis/admin">templates
folder</a>,
we'll create two new files, a html template file, that actually points to a javascript file
containing a reference to the Mapquest Open Aerial tiles service.</p>

<h2>Creating mapquestGeoAdminSubclass</h2>

<p>The <a href="https://github.com/django/django/blob/master/django/contrib/gis/admin/options.py#L132-L139">OSMGeoAdmin class</a> is a subclass of the base GeoModelAdmin. The GeoModelAdmin contains a set of
configuration parameters for the map, covering basic setup. The OSMGeoAdmin class utilizes
many of those configuration parameters, but configures the map for a spherical mercator projection.
Since our Mapquest Aerial Tiles also require a spherical mercator projection, our class will
be a subclass of the OSMGeoAdmin.</p>

<p>We add the following code below the OSMGeoAdmin class definition.</p>

<p>``` python</p>

<pre><code># Subclass OSMGeoAdmin, pointing to the To-Be-Created
# Mapquest template file.`
class mapquestGeoAdmin(OSMGeoAdmin):
    map_template = 'gis/admin/mapquest.html'
</code></pre>

<p>```</p>

<h2>Modify the GIS Admin Package's <strong>init</strong>.py</h2>

<p>The <code>__init__.py</code> file imports the <code>OSMGeoAdmin</code> class, let's modify it to include our
new subclass</p>

<p>``` python</p>

<pre><code># From this
from django.contrib.gis.admin.options import OSMGeoAdmin
# To this
from django.contrib.gis.admin.options import OSMGeoAdmin, mapquestGeoAdmin
</code></pre>

<p>```</p>

<h2>Create mapquest.js</h2>

<p>Again, using the OpenStreetMap implementation as a reference, we can see that
<a href="https://github.com/django/django/blob/master/django/contrib/gis/templates/gis/admin/osm.js">osm.js</a> extends the basic <code>openlayers.js</code> file, but replaces the contents of the <code>base layer</code>
block with an a reference to the OpenStreetMap layer.</p>

<p>We'll create a similar file in this package called <code>mapquest.js</code>. The contents are as
follows:</p>

<p>```
{# Source: http://openlayers.org/dev/examples/mapquest.html #}
{% extends "gis/admin/openlayers.js" %}
{% block base_layer %}</p>

<pre><code>    new OpenLayers.Layer.XYZ(
        "Imagery",
        [
            "http://otile1.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png",
            "http://otile2.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png",
            "http://otile3.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png",
            "http://otile4.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png"
        ],
        {
            attribution: "Tiles Courtesy of &lt;a href='http://open.mapquest.co.uk/' target='_blank'&gt;MapQuest&lt;/a&gt;. Portions Courtesy NASA/JPL-Caltech and U.S. Depart. of Agriculture, Farm Service Agency. &lt;img src='http://developer.mapquest.com/content/osm/mq_logo.png' border='0'&gt;",
            transitionEffect: "resize"
        }
    )
</code></pre>

<p>{% endblock %}
```</p>

<h2>Create mapquest.html</h2>

<p>In the same folder, we'll create an html template file, pointing to our javascript file.
We'll call the file <code>mapquest.html</code>. Here are the contents:</p>

<p><code>
{% extends "gis/admin/openlayers.html" %}
{% block openlayers %}{% include "gis/admin/mapquest.js" %}{% endblock %}
</code></p>

<h2>In admin.py, Reference mapquestGeoAdmin</h2>

<p>The last step is to replace references to <code>GeoModelAdmin</code> or <code>OSMGeoAdmin</code> to
<code>mapquestGeoAdmin</code>.</p>

<p>```
class PntTraxGeoAdmin(admin.mapquestGeoAdmin):</p>

<pre><code>"""Base Class for Geometry Table Admin"""
list_display = ('name','collectDate','group','featurePurpose','collectionMethod')
list_editable = ('featurePurpose','group','collectionMethod')
list_filter = ('featurePurpose','group__name')
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
