<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[mattmakesmaps]]></title>
  <link href="http://mkgeomatics.github.io/atom.xml" rel="self"/>
  <link href="http://mkgeomatics.github.io/"/>
  <updated>2013-08-06T20:23:27-07:00</updated>
  <id>http://mkgeomatics.github.io/</id>
  <author>
    <name><![CDATA[Matthew Kenny]]></name>
    <email><![CDATA[matthewkenny AT gmail DOT com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MapBox + Github = Free and Fast Web Maps]]></title>
    <link href="http://mkgeomatics.github.io/blog/2013/07/17/mapbox-plus-github-equals-free-and-fast-web-maps/"/>
    <updated>2013-07-17T11:06:00-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2013/07/17/mapbox-plus-github-equals-free-and-fast-web-maps</id>
    <content type="html"><![CDATA[<p>With the announcement of Github&#8217;s awesome support for <a href="http://www.mapbox.com/blog/github-mapbox-maps/">direct geojson renderingg</a>,
folks can deploy an embeddable web map with a single git commit and push. This got me
thinking about the potential of github, specifically <a href="http://pages.github.com/">github pages</a>,
as a vehicle for the display of more customized web mapping applications. The result of that
experiment is <a href="http://aknativenamesatlas.com">aknativenamesatlas.com</a>. <!-- more --></p>

<p>I deployed the initial draft of this site in a few hours, thanks entirely not only to
the power of MapBox and Github&#8217;s hosting infrastructure, but also to the easy-to-use
<a href="http://www.mapbox.com/map-sites/">mapping templates</a> provided by MapBox.</p>

<p>This blog series will attempt to illustrate some of the major steps involved in the
process of deploying this map. The general process however, is as follows.</p>

<ol>
<li>Style cartographic layers via TileMill, upload to MapBox.</li>
<li>Create composite map of individual operation layers plus a base within MapBox.</li>
<li>Fork MapBox&#8217;s dc-properties-template via github.</li>
<li>Edit forked repository to point to my layers of interest.</li>
<li>Add CNAME record for custom URL to forked repository.</li>
<li>Configure DNS to route custom domain name to github pages.</li>
</ol>


<p>This first post will cover the cartography, and more importantly, the on-the-fly compositing of
layers.</p>

<h1>Cartography &amp; Compositing</h1>

<p>The primary tool used to create the cartographic look and feel of the individual data layers is
<a href="http://www.mapbox.com/tilemill/">TileMill</a>. TileMill is a desktop cartographic design studio, allowing you to
load your own datasets from a variety of spatial formats (SHP, SpatialLite, PostGIS), and style via a CSS-like
language, <a href="http://www.mapbox.com/tilemill/docs/manual/carto/">CartoCSS</a>.</p>

<p>I&#8217;ll gloss over the details for styling maps in in TileMill, but they&#8217;ve got a great
<a href="http://www.mapbox.com/tilemill/docs/crashcourse/introduction/">quick-start guide</a>.</p>

<p>For my site, I ended up creating two projects in TileMill, one for each operational layer present in the final
map. The first layer represents <a href="http://a.tiles.mapbox.com/v3/mattmakesmaps.language_points/page.html">place names</a>
, symbolized as points. The second layer depicts <a href="http://a.tiles.mapbox.com/v3/mattmakesmaps.language_lines/page.html">language regions</a>
, symbolized as lines, but the geometry are in actuality polygons (required for the display of attribute information via a hover event).</p>

<p>Splitting these operational layers into separate projects in TileMill, and conversely separate web maps when uploaded to MapBox, allows
us to mix and match these layers at will. Specifically, the <a href="http://www.mapbox.com/developers/api/#Map.resources">MapBox REST API</a>
allows us to composite or layer individual maps into a single-tile, on-the-fly. If you&#8217;re head hasn&#8217;t been exploded, allow me to illustrate.</p>

<p>The map on <a href="http://aknativenamesatlas.com">aknativenamesatlas.com</a> is a composite of multiple layers. A basemap, provided by mapbox, as well as two operational layers (a point layer and a line layer).</p>

<p>A <a href="http://a.tiles.mapbox.com/v3/mattmakesmaps.map-9ipoh344/6/5/16.png">single tile</a> from this map looks like this:</p>

<p><img src="http://a.tiles.mapbox.com/v3/mattmakesmaps.map-9ipoh344/6/5/16.png" title="Base Tile" ></p>

<p>The URL is as follows: <a href="http://a.tiles.mapbox.com/v3/mattmakesmaps.map-9ipoh344/6/5/16.png">http://a.tiles.mapbox.com/v3/mattmakesmaps.map-9ipoh344/6/5/16.png</a>. Note the <code>mattmakesmaps.map-9ipoh3441</code> section of the URL. This is a combination of my user account, <code>mattmakesmaps</code> and the unique map id. This identifier indicates that I&#8217;m requesting the tile representing this specific map, again, a composite of multiple layers.</p>

<p>We can however, query individual layers that make up this map. For example, the lines layer specifically has a URL endpoint of <a href="http://a.tiles.mapbox.com/v3/mattmakesmaps.language_lines/6/5/16.png">http://a.tiles.mapbox.com/v3/mattmakesmaps.language_lines/6/5/16.png</a>. It looks like this.</p>

<p><img src="http://a.tiles.mapbox.com/v3/mattmakesmaps.language_lines/6/5/16.png"></p>

<p>Similarly, with the points layer: <a href="http://a.tiles.mapbox.com/v3/mattmakesmaps.language_points/6/5/16.png">http://a.tiles.mapbox.com/v3/mattmakesmaps.language_points/6/5/16.png</a>. NOTE: You&#8217;ll have to squint to see the points. They don&#8217;t show up very well with the black on dark blue background. OR, you can open the tile link above in a new tab.</p>

<p><img src="http://a.tiles.mapbox.com/v3/mattmakesmaps.language_points/6/5/16.png"></p>

<p>The real magic comes when we composite these individual layers together, on-the-fly. From the <a href="http://www.mapbox.com/developers/api/#Map.resources">docs</a></p>

<blockquote><p>By joining multiple ids with commas into a single :map parameter you can access the MapBox Hosting compositing API to layer multiple tile images, UTFgrids or aggregate the TileJSON of multiple maps into a single map.</p></blockquote>


<p>That looks something like this <a href="http://a.tiles.mapbox.com/v3/mattmakesmaps.language_lines,mattmakesmaps.language_points/6/5/16.png">http://a.tiles.mapbox.com/v3/mattmakesmaps.language_lines,mattmakesmaps.language_points/6/5/16.png</a>:</p>

<p><img src="http://a.tiles.mapbox.com/v3/mattmakesmaps.language_lines,mattmakesmaps.language_points/6/5/16.png"></p>

<p>Pretty cool. You can even flip the z-index in which the layers are composited by simply re-arranging their position in the URL.</p>

<p>That&#8217;s it for now. The next post will cover how to fork Mapbox&#8217;s DC-Properties template, allowing us to visualize our maps, accessible via github pages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fixing ArcGIS 10.1 Numpy Import Error From Python Console]]></title>
    <link href="http://mkgeomatics.github.io/blog/2013/07/10/fixing-arcgis-10-dot-1-python-console-numpy-import-error/"/>
    <updated>2013-07-10T20:35:00-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2013/07/10/fixing-arcgis-10-dot-1-python-console-numpy-import-error</id>
    <content type="html"><![CDATA[<p>At my current employer, we have four Windows 7 64-bit workstations, all running ArcGIS 10.1 under
various license levels. Hilariously, due to some quirk that I haven&#8217;t been able to figure out,
all machines have been reporting the following traceback when running <code>&gt;&gt;&gt; import numpy</code> from
ArcGIS Desktop&#8217;s internal Python console.</p>

<!-- more -->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; import numpy
</span><span class='line'>Runtime error 
</span><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "&lt;string&gt;", line 1, in &lt;module&gt;
</span><span class='line'>  File "c:\program files (x86)\arcgis\desktop10.1\arcpy\arcpy\__init__.py", line 24, in &lt;module&gt;
</span><span class='line'>    from arcpy.toolbox import *
</span><span class='line'>  File "c:\program files (x86)\arcgis\desktop10.1\arcpy\arcpy\toolbox.py", line 342, in &lt;module&gt;
</span><span class='line'>    from management import Graph, GraphTemplate
</span><span class='line'>  File "c:\program files (x86)\arcgis\desktop10.1\arcpy\arcpy\management.py", line 22, in &lt;module&gt;
</span><span class='line'>    import _management
</span><span class='line'>  File "c:\program files (x86)\arcgis\desktop10.1\arcpy\arcpy\_management.py", line 14, in &lt;module&gt;
</span><span class='line'>    import _graph
</span><span class='line'>  File "c:\program files (x86)\arcgis\desktop10.1\arcpy\arcpy\_graph.py", line 27, in &lt;module&gt;
</span><span class='line'>    import numpy
</span><span class='line'>ImportError: No module named numpy</span></code></pre></td></tr></table></div></figure>


<p>One solution to this is to explicitly append the <code>PYTHONPATH</code> environment variable to reference the ArcGIS10.1 Python install&#8217;s <code>site-packages</code> directory.</p>

<h1>Creation of PYTHONPATH Environment Variable</h1>

<ol>
<li><p>From the start menu, right click the <code>computer</code> button and select <code>properties</code>.</p></li>
<li><p>Click <code>Advanced System Settings</code>.</p></li>
<li><p>Click the <code>Advanced</code> tab, and select the <code>Environment Variables</code> button.</p></li>
<li><p>Click <code>New</code> to create a new environment variable.</p></li>
<li><p>Name the environment variable <code>PYTHONPATH</code> and set it&#8217;s value to point to the <code>site-packages</code> directory for ArcGIS. For my instance, this is <code>C:\Python27\ArcGIS10.1\Lib\site-packages</code>.</p></li>
<li><p>Restart the machine. You should now be able to successfully import numpy, arcpy, and any other Python modules installed as part of the ArcGIS 10.x version of Python.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Auto-Push to GitHub via Machine User]]></title>
    <link href="http://mkgeomatics.github.io/blog/2013/06/16/auto-push-to-github-via-machine-user/"/>
    <updated>2013-06-16T14:19:00-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2013/06/16/auto-push-to-github-via-machine-user</id>
    <content type="html"><![CDATA[<p>This post will review a workflow for automatically pushing data from a client machine to github.
This can be useful if you want to automatically make publicly available data that are regularly processed on
a local machine. <!-- more --> For my particular use case, I&#8217;m downloading data from the <a href="http://waterservices.usgs.gov/rest/IV-Test-Tool.html">USGS Instantaneus Values
Web Service</a> , and would
like to process those data locally for use in a d3 visualization. My d3 viz will eventually be
hosted on github as well, so having a dynamically updated dataset stored on github made sense.
I&#8217;m sure that it&#8217;s possible to emulate this ETL workflow in pure JavaScript, but I wanted to see
how to set this up, in the event that I found myself in a situation in which heavy pre-processing
of data was required.</p>

<p>The general steps are as follows:</p>

<ol>
<li>On the local machine, create a machine user and group.</li>
<li>Create a corresponding github account for the machine user.</li>
<li>Generate an SSH key machine user &amp; associate the public key of the machine user to its github account.</li>
<li>Assign the github account to the repository of interest.</li>
<li>Clone the repository of interest, making it group writable.</li>
<li>On the local machine, create a cron job under the machine user to execute the processing script.</li>
</ol>


<h2>Create Machine User and Group</h2>

<p>On my local machine, I start by creating a user and group for the purpose of pushing data to github.
I&#8217;m doing this to isolate the amount of exposure that this user has to my wider system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Create the user, rdi-git</span>
</span><span class='line'><span class="nv">$ </span>sudo adduser rdi-git
</span><span class='line'><span class="c"># You&#39;ll be prompted to enter a password as well.</span>
</span><span class='line'><span class="c"># Create the group, git</span>
</span><span class='line'><span class="nv">$ </span>sudo addgroup git
</span><span class='line'><span class="c"># Add our new user (rdi-git) to the new group (git)</span>
</span><span class='line'><span class="nv">$ </span>sudo usermod -a -G git rdi-git
</span></code></pre></td></tr></table></div></figure>


<h2>Create a Github Account for Machine User</h2>

<p>After having created the machine users on my local box, the next step is to create an analogous
user on <a href="https://github.com">github</a>.</p>

<h2>Generate SSH Key &amp; Assign to Github User</h2>

<p>From the local machine, make sure that you&#8217;re logged in as the newly created machine user.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo su rdi-git
</span></code></pre></td></tr></table></div></figure>


<p>At this point, I defer to the great instructions on the Github help docs for <a href="https://help.github.com/articles/generating-ssh-keys">generating an ssh key</a>.</p>

<h2>Assign Github Account As Collaborator to Repo of Interest</h2>

<p>Next, I add our github user, rdi-git, as a collaborator on my repository of interest. Here is a link on
the <a href="https://help.github.com/articles/how-do-i-add-a-collaborator">Github help docs</a>.</p>

<h2>Clone the Repository of Interest, add Assign Permissions</h2>

<p>I&#8217;m creating a <code>/projects/</code> folder, in which I&#8217;ll clone my repo. I&#8217;d like to ensure that this folder, and
subsequently all repos contained within it, are associated with git group. This <a href="http://unix.stackexchange.com/questions/12842/make-all-new-files-in-a-directory-accessible-to-a-group">stackoverflow</a> outlines the required commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Make the directory</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /
</span><span class='line'><span class="nv">$ </span>mkdir projects
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /projects
</span><span class='line'><span class="c"># Change perms to group writable. See Above SO post.</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">umask </span>002            <span class="c"># allow group write; everyone must do this</span>
</span><span class='line'><span class="nv">$ </span>chgrp git .          <span class="c"># set directory group to gitG</span>
</span><span class='line'><span class="nv">$ </span>chmod g+s .          <span class="c"># files created in directory will be in group git</span>
</span><span class='line'><span class="c"># Clone our repo of interest, using ssh</span>
</span><span class='line'><span class="nv">$ </span>git@github.com:mattmakesmaps/robo-d3.git
</span></code></pre></td></tr></table></div></figure>


<h2>Create the Cron Job</h2>

<p>The repo I&#8217;ve just cloned contains the <a href="https://github.com/mattmakesmaps/robo-d3/blob/master/scripts/waterservices_parser.py">processing script</a> I&#8217;ll be running.
Our processed data will also be stored and pushed back to this repository.</p>

<p>I&#8217;d like to have my processing script run once every hour, on the hour. We setup the cron job by first entering
crontab.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Login as machine user, cron job will be run under this id.</span>
</span><span class='line'><span class="nv">$ </span>sudo su rdi-git
</span><span class='line'><span class="nv">$ </span>crontab -e
</span></code></pre></td></tr></table></div></figure>


<p>Here is an excerpt of the machine user&#8217;s cron jobs, with the new job added at the bottom.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># For more information see the manual pages of crontab(5) and cron(8)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># m h  dom mon dow   command</span>
</span><span class='line'>0 * * * * python /projects/robo-d3/scripts/waterservices_parser.py &gt; ~/robo-d3.log 2&gt;&amp;1
</span></code></pre></td></tr></table></div></figure>


<p>We essential say, on the minute zero, of every hour, for every day, month, and weekday, run the command &#8216;python /path/to/script&#8217;. The tail indicates that we&#8217;re outputting both STDOUT and the ERROR log to <code>/home/rdi-git/robo-d3.log</code></p>

<p>And there we go. If we check out the <a href="https://github.com/mattmakesmaps/robo-d3/commits/master">commit logs</a> we can
see that our github user, rdi-git, has been pushing every hour on the hour. Woo-hoo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack GeoDjango Admin with Mapquest Tiles]]></title>
    <link href="http://mkgeomatics.github.io/blog/2013/05/01/django-add-mapquest-tiles/"/>
    <updated>2013-05-01T20:53:00-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2013/05/01/django-add-mapquest-tiles</id>
    <content type="html"><![CDATA[<p>The <a href="http://geodjango.org/">GeoDjango model</a> admin provides a great <a href="http://openlayers.org/">OpenLayers</a> interface, allowing a user to create geographic features (points, lines, polygons) directly via a web map. Out-of-the-box,
GeoDjango ships with a base GeoAdmin class, using the default OL world borders layer,
as well as a subclass for OSM streets data. The OSM layer is great, and provides a good base
for most use cases. That being said, for <a href="https://github.com/mattmakesmaps/PntTrax">PntTrax</a>, I needed aerial tiles. <!-- more -->My application deals
primarily with the storage of field collected (GPS, field notes, aerial markup, etc.) data.
Our data occur primarily in non-urban areas, where natural features provide a much
better context for orientation then would be expected with any streets layer, OSM or otherwise.
Mapquest provides a good set of aerial tiles, that can be easily integrated into OpenLayers.</p>

<p>It&#8217;s easier to place a point on this:</p>

<p><img src="http://mattmakesmaps.com/images/2013-04-30/aerial.jpg" width="500"></p>

<p>Then this:</p>

<p><img src="http://mattmakesmaps.com/images/2013-04-30/osm.png" width="500"></p>

<p>Hacking the admin to display the <a href="http://developer.mapquest.com/web/products/open/map">Mapquest aerial tiles</a> is a pretty straightforward process.
From the gis contrib package, we&#8217;ll modify <a href="https://github.com/django/django/blob/master/django/contrib/gis/admin/options.py">options.py</a> and its <a href="https://github.com/django/django/blob/master/django/contrib/gis/admin/__init__.py">__init__.py</a>, subclassing the OSMGeoAdmin. Within the <a href="https://github.com/django/django/tree/master/django/contrib/gis/templates/gis/admin">templates
folder</a>,
we&#8217;ll create two new files, a html template file, that actually points to a javascript file
containing a reference to the Mapquest Open Aerial tiles service.</p>

<h2>Creating mapquestGeoAdminSubclass</h2>

<p>The <a href="https://github.com/django/django/blob/master/django/contrib/gis/admin/options.py#L132-L139">OSMGeoAdmin class</a> is a subclass of the base GeoModelAdmin. The GeoModelAdmin contains a set of
configuration parameters for the map, covering basic setup. The OSMGeoAdmin class utilizes
many of those configuration parameters, but configures the map for a spherical mercator projection.
Since our Mapquest Aerial Tiles also require a spherical mercator projection, our class will
be a subclass of the OSMGeoAdmin.</p>

<p>We add the following code below the OSMGeoAdmin class definition.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Subclass OSMGeoAdmin, pointing to the To-Be-Created</span>
</span><span class='line'><span class="c"># Mapquest template file.`</span>
</span><span class='line'><span class="k">class</span> <span class="nc">mapquestGeoAdmin</span><span class="p">(</span><span class="n">OSMGeoAdmin</span><span class="p">):</span>
</span><span class='line'>    <span class="n">map_template</span> <span class="o">=</span> <span class="s">&#39;gis/admin/mapquest.html&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Modify the GIS Admin Package&#8217;s __init__.py</h2>

<p>The <code>__init__.py</code> file imports the <code>OSMGeoAdmin</code> class, let&#8217;s modify it to include our
new subclass</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># From this</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib.gis.admin.options</span> <span class="kn">import</span> <span class="n">OSMGeoAdmin</span>
</span><span class='line'><span class="c"># To this</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">django.contrib.gis.admin.options</span> <span class="kn">import</span> <span class="n">OSMGeoAdmin</span><span class="p">,</span> <span class="n">mapquestGeoAdmin</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create mapquest.js</h2>

<p>Again, using the OpenStreetMap implementation as a reference, we can see that <code>osm.js</code> extends the basic <code>openlayers.js</code> file, but replaces the contents of the <code>base layer</code>
block with an a reference to the OpenStreetMap layer.</p>

<p>We&#8217;ll create a similar file in this package called <code>mapquest.js</code>. The contents are as
follows:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span><span class="c"># Source: http://openlayers.org/dev/examples/mapquest.html #}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">extends</span> <span class="s">&quot;gis/admin/openlayers.js&quot;</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">block</span> <span class="n">base_layer</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'>        <span class="n">new</span> <span class="n">OpenLayers</span><span class="o">.</span><span class="n">Layer</span><span class="o">.</span><span class="n">XYZ</span><span class="p">(</span>
</span><span class='line'>            <span class="s">&quot;Imagery&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>                <span class="s">&quot;http://otile1.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;http://otile2.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;http://otile3.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="s">&quot;http://otile4.mqcdn.com/tiles/1.0.0/sat/${z}/${x}/${y}.png&quot;</span>
</span><span class='line'>            <span class="p">],</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">attribution</span><span class="p">:</span> <span class="s">&quot;Tiles Courtesy of &lt;a href=&#39;http://open.mapquest.co.uk/&#39; target=&#39;_blank&#39;&gt;MapQuest&lt;/a&gt;. Portions Courtesy NASA/JPL-Caltech and U.S. Depart. of Agriculture, Farm Service Agency. &lt;img src=&#39;http://developer.mapquest.com/content/osm/mq_logo.png&#39; border=&#39;0&#39;&gt;&quot;</span><span class="p">,</span>
</span><span class='line'>                <span class="n">transitionEffect</span><span class="p">:</span> <span class="s">&quot;resize&quot;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">endblock</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Create mapquest.html</h2>

<p>In the same folder, we&#8217;ll create an html template file, pointing to our javascript file.
We&#8217;ll call the file <code>mapquest.html</code>. Here are the contents:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">extends</span> <span class="s">&quot;gis/admin/openlayers.html&quot;</span> <span class="o">%</span><span class="p">}</span>
</span><span class='line'><span class="p">{</span><span class="o">%</span> <span class="n">block</span> <span class="n">openlayers</span> <span class="o">%</span><span class="p">}{</span><span class="o">%</span> <span class="n">include</span> <span class="s">&quot;gis/admin/mapquest.js&quot;</span> <span class="o">%</span><span class="p">}{</span><span class="o">%</span> <span class="n">endblock</span> <span class="o">%</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>In admin.py, Reference mapquestGeoAdmin</h2>

<p>The last step is to replace references to <code>GeoModelAdmin</code> or <code>OSMGeoAdmin</code> to
<code>mapquestGeoAdmin</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">PntTraxGeoAdmin</span><span class="p">(</span><span class="n">admin</span><span class="o">.</span><span class="n">mapquestGeoAdmin</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;Base Class for Geometry Table Admin&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">list_display</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;name&#39;</span><span class="p">,</span><span class="s">&#39;collectDate&#39;</span><span class="p">,</span><span class="s">&#39;group&#39;</span><span class="p">,</span><span class="s">&#39;featurePurpose&#39;</span><span class="p">,</span><span class="s">&#39;collectionMethod&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list_editable</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;featurePurpose&#39;</span><span class="p">,</span><span class="s">&#39;group&#39;</span><span class="p">,</span><span class="s">&#39;collectionMethod&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">list_filter</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;featurePurpose&#39;</span><span class="p">,</span><span class="s">&#39;group__name&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you go. Your Django GeoAdmin interface is now rocking aerial tiles courtesy
of Mapquest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GeoDjango: Standing Up A GeoJSON Web-Service]]></title>
    <link href="http://mkgeomatics.github.io/blog/2011/12/12/geodjango-standing-up-a-geojson-web-service/"/>
    <updated>2011-12-12T00:30:17-08:00</updated>
    <id>http://mkgeomatics.github.io/blog/2011/12/12/geodjango-standing-up-a-geojson-web-service</id>
    <content type="html"><![CDATA[<p>The models are complete. The database is loaded with some test tabular and spatial data. We&#8217;re pushing out HTML representations of attribute data using GeoDjango&#8217;s standard templating functions. Now, the focus moves to visualizing these features&#8217; geometries in a spatial context. Just as with a Django QuerySet, GeoDjango provides a GeoQuerySet. <!-- more --> When paired with a spatially-enabled database (e.g. PostGIS, SpatialLite, etc.), the GeoQuerySet provides functionality for querying data using a series of spatial filters, in addition to tabular filters. As a point of reference, the GeoDjango docs have great tables depicting a blow-by-blow comparison of different spatial databases, displaying each available <a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/db-api/#spatial-lookup-compatibility">Spatial Lookup</a> and <a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/db-api/#geoqueryset-methods">GeoQuerySet method</a>. Take note, PostGIS is the clear winner in terms of functionality ;)</p>

<h2>Why GeoJSON?</h2>

<p>From the perspective of exporting data, GeoDjango supports a number of formats. The GeoQuerySet methods can represent your model&#8217;s geometry column in a number of different <a href="https://docs.djangoproject.com/en/dev/ref/contrib/gis/geoquerysets/#geometry-output">formats</a>: GeoHash, GeoJSON, GML, KML, and SVG. Of all these serialization formats, I&#8217;ve found KML to be the most frequently used amongst GeoDjango users. Illustrative of this, three of the four functions in <a href="https://code.djangoproject.com/browser/django/trunk/django/contrib/gis/shortcuts.py">django.contrib.gis.shortcuts</a> have to do with KML/KMZ. That&#8217;s awesome, but where is the love for GeoJSON?</p>

<p>KML can be easily consumed by OpenLayers, the king of open source web mapping viewers. But some of the new kids, e.g. leaflet, polymaps, look to favor GeoJSON over KML as an input for dynamically rendered data, not directly consuming KML out-of-the-box. That being said, if you want KML, this <a href="https://github.com/shramov/Leaflet/tree/master/src/layer">fork of leaflet</a> looks like it will work for you. In my particular project, I&#8217;m interested in using leaflet, so GeoJSON was the way to go.</p>

<p>Later on, I&#8217;d like to do some speed comparisons, rendering the same featureset using OpenLayers, represented as both KML and GeoJSON, but that&#8217;s for the future. I&#8217;m wondering if OpenLayers will handle the JSON object faster then KML&#8217;s XML? JSON is just JavaScript after all.</p>

<h2>The Problem</h2>

<p>The GeoDjango GeoQuerySet API has built in methods to handle the serialization and de-serialization of a result set&#8217;s geometries into different formats. The problem is that these methods only wrap the geometries of a result set. For display in a web mapping application, like leaflet, I want to have access to both the geometry in the format of my choosing, as well as the supplementary attributes (name, type, etc.) which provide context for that geometry.</p>

<p>For example, asking for the GeoJSON representation of a given feature through Django&#8217;s shell, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Import Models from the Company Application</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">company.Models</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="c"># Create a GeoQuerySet from the primary key, return GeoJSON</span>
</span><span class='line'><span class="n">qs</span> <span class="o">=</span> <span class="n">Boundary</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">geojson</span><span class="p">()</span>
</span><span class='line'><span class="c"># Print GeoJSON representation of geom</span>
</span><span class='line'><span class="k">print</span> <span class="n">qs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">geojson</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will produce a GeoJSON object like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'> <span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;MultiPolygon&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;coordinates&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>    <span class="p">[</span>
</span><span class='line'>      <span class="p">[</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="o">-</span><span class="mf">122.574295</span><span class="p">,</span>
</span><span class='line'>          <span class="mf">47.856636</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="o">-</span><span class="mf">122.573924</span><span class="p">,</span>
</span><span class='line'>          <span class="mf">47.85718</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="p">[</span>
</span><span class='line'>          <span class="o">-</span><span class="mf">122.573719</span><span class="p">,</span>
</span><span class='line'>          <span class="mf">47.85757</span>
</span><span class='line'>        <span class="p">]</span> <span class="c1">// Truncated Verticies</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As shown in the example above, the geometries are returned, but not the tabular attributes associated with that feature. Looking at the <a href="http://geojson.org/geojson-spec.html">GeoJSON spec</a>, there are multiple &#8216;type&#8217; values which an object can be constrained by. Using GeoDjango&#8217;s geoJSON() method will produce a type matching the geometry listed in the associated GeoDjango model (point, line, polygon, etc). The distinction here is that I&#8217;d like to return a GeoJSON object of type &#8216;Feature&#8217; or &#8216;FeatureCollection&#8217;. These types require an additional &#8216;properties&#8217; parameter, which can store tabular attributes. From the spec:</p>

<blockquote><p>A feature object must have a member with the name &#8220;properties&#8221;. The value of the properties member is an object (any JSON object or a JSON null value).</p></blockquote>

<p>So, the trick now is to dynamically create a GeoJSON object which contains both populated Geom and Properties attributes.</p>

<h2>The fix (vectorformats)</h2>

<p>In order to create a fully populated GeoJSON object, we need to bring in some extra assistance. Some quick searching brought me to this stack exchange <a href="http://stackoverflow.com/questions/3034482/rendering-spatial-data-of-geoqueryset-in-a-custom-view-on-geodjango">response</a>, from <a href="http://crschmidt.net/blog/">Chris Schmidt</a>. Chris&#8217; vectorformats package handles the serialization and de-serializtion of a variety of formats, including Django Querysets and GeoJSON. From the project <a href="http://packages.python.org/vectorformats/">homepage</a>:</p>

<blockquote><p>The vectorformats library is designed to make it easy to serialize content from any source to any source within Python. Think of it as a “poor man’s OGR” – a pure Python implementation of transforming features to and from various formats (largely XML based).</p></blockquote>

<p>Installing vectorformats is as easy as:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$sudo</span> easy_install vectorformats
</span></code></pre></td></tr></table></div></figure>


<p>From there, as outlined in the above referenced post, it&#8217;s only a matter of adding a few lines into your GeoDjango app&#8217;s <a href="https://github.com/mattmakesmaps/geodjango/blob/master/sampling/views.py">view function</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># Using vectorfeatures module return a GeoJSON FeatureCollection</span>
</span><span class='line'><span class="c"># for a given boundary ID.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">boundary_detail</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">boundary_id</span><span class="p">):</span>
</span><span class='line'>    <span class="n">boundary_detail</span> <span class="o">=</span> <span class="n">Boundary</span><span class="o">.</span><span class="n">objects</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">pk</span><span class="o">=</span><span class="n">boundary_id</span><span class="p">)</span>
</span><span class='line'>    <span class="n">djf</span> <span class="o">=</span> <span class="n">Django</span><span class="o">.</span><span class="n">Django</span><span class="p">(</span><span class="n">geodjango</span><span class="o">=</span><span class="s">&#39;geom&#39;</span><span class="p">,</span> <span class="n">properties</span><span class="o">=</span><span class="p">[</span><span class="s">&#39;name&#39;</span><span class="p">])</span>
</span><span class='line'>    <span class="n">geoj</span> <span class="o">=</span> <span class="n">GeoJSON</span><span class="o">.</span><span class="n">GeoJSON</span><span class="p">()</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">geoj</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">djf</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">boundary_detail</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">HttpResponse</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The resulting GeoJSON object, represented as a &#8216;type&#8217; of &#8216;FeatureCollection&#8217;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;crs&quot;</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;FeatureCollection&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;features&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;geometry&quot;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;MultiPolygon&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;coordinates&quot;</span><span class="o">:</span><span class="p">[</span>
</span><span class='line'>          <span class="p">[</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>              <span class="p">[</span>
</span><span class='line'>                <span class="o">-</span><span class="mf">122.574295</span><span class="p">,</span>
</span><span class='line'>                <span class="mf">47.856636</span>
</span><span class='line'>              <span class="p">],</span>
</span><span class='line'>              <span class="p">[</span>
</span><span class='line'>                <span class="o">-</span><span class="mf">122.573924</span><span class="p">,</span>
</span><span class='line'>                <span class="mf">47.85718</span>
</span><span class='line'>              <span class="p">],</span>
</span><span class='line'>              <span class="p">[</span>
</span><span class='line'>                <span class="o">-</span><span class="mf">122.573719</span><span class="p">,</span>
</span><span class='line'>                <span class="mf">47.85757</span>
</span><span class='line'>              <span class="p">]</span> <span class="c1">// Truncated Verticies</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span><span class="o">:</span><span class="s2">&quot;Feature&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;properties&quot;</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">:</span><span class="s2">&quot;Port Gamble&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it, GeoJSON containing both the geometry and attributes. This output can now be mapped to URL, creating an endpoint such as &#8216;http://my-site.com/geojson/boundary/{boundary_id}/&#8217;. Pass this to your web mapping client, and you&#8217;re ready to rock.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to GeoDjango]]></title>
    <link href="http://mkgeomatics.github.io/blog/2011/11/28/moving-to-geodjango/"/>
    <updated>2011-11-28T00:35:49-08:00</updated>
    <id>http://mkgeomatics.github.io/blog/2011/11/28/moving-to-geodjango</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been creating a simple GeoDjango application for managing environmental sampling metadata, and it&#8217;s been a lot of fun so far. I&#8217;ve had experience working with many different forms of metadata tracking, from spreadsheets, to wikis, to online project management tools. All of them have their ups and downs, and it seems like there is always a dealbreaker with each organizational method.</p>

<p>Spreadsheets are easy to edit, but lack any form of relational structure (two sets of data for the same report? i guess i&#8217;ll just put two entries into the same cell).</p>

<!-- more -->


<p>[caption id=&#8221;attachment_487&#8221; align=&#8221;alignnone&#8221; width=&#8221;464&#8221; caption=&#8221;sometimes spreadsheets just don&#8217;t work&#8230;&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/11/Screenshot.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/11/Screenshot.png" alt="" /></a>[/caption]</p>

<p>Wikis are cool, allow easy access to information, but are (in certain cases) a pain for folks to edit. Take the experience of table creation. Dokuwiki, a generic wiki software, requires a series of  carefully placed carrots and pipes to delineate headers and columns. A common pain comes when adding a new value to a new row, in which that value exceeds the length of any previous cell. This requires the author to expand the column header, and all previously entered rows, re-aligning the pipes and carrots. Granted as a slightly OCD GIS Analyst, the sight of a well crafted text table fills me with no less wonder then when I saw Albert Bierstadt&#8217;s <a href="http://www.seattleartmuseum.org/exhibit/exhibitDetail.asp?eventID=21084">&#8220;Puget Sound on the Pacific Coast&#8221;</a>, but it&#8217;s just darn tedious at times. Additionally, as the log of sampling events grows larger, it gets harder to manage. Dokuwiki, AFAIK provides no ways to automatically resort entire sections of pages or records in tables based on alphabetical order, which would make searching for information on a particular page much faster as content becomes larger and larger.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>^ Column One                ^ Column Two                 ^
</span><span class='line'>| Zee 'z' string            | This is a longer string    |
</span><span class='line'>| 2nd longer string of text | 2nd short string           |
</span><span class='line'>| SuperShort                | A string starting with 'A' |</span></code></pre></td></tr></table></div></figure>


<p>Online project management tools are interesting as well. They allow rapid collaboration between project members, and provide template functionality, allowing for status reports on recurring workflows to be easily generated (e.g., create a template for a report, spawn off an instance of a template for each new project). The downside to these services are that: they cost money, they also may not provide a normalized way to store data, and (of most interest to myself) they probably don&#8217;t allow for the storage/visualization of spatial data.</p>

<p>[caption id=&#8221;attachment_488&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;10 megs free for one user? cool!&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/11/Screenshot-1.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/11/Screenshot-1-300x162.png" alt="" /></a>[/caption]</p>

<p>In comes GeoDjango. Over the next few posts, I think I&#8217;ll record my experiences developing an application that allows the storage of metadata, within the context of environmental sampling efforts. The goal is to provide a web application which stores both tabular and spatial data in a normalized fashion, and easily visualize both in an informative way.</p>

<p>[caption id=&#8221;attachment_489&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Hey look Ma&#8217;, it&#8217;s GeoJSON!&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/11/Screenshot-2.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/11/Screenshot-2-300x147.png" alt="" /></a>[/caption]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hand-Rolled Vector Tiles - TileStache]]></title>
    <link href="http://mkgeomatics.github.io/blog/2011/02/25/hand-rolled-vector-tiles-tilestache/"/>
    <updated>2011-02-25T05:09:52-08:00</updated>
    <id>http://mkgeomatics.github.io/blog/2011/02/25/hand-rolled-vector-tiles-tilestache</id>
    <content type="html"><![CDATA[<p>A few weeks ago I found myself surfing the intertubes for instructions on how to serve up some vector tile goodness. That search came up pretty much empty, except for one glimmering <a href="http://gis.stackexchange.com/questions/3712/create-vector-geojson-tiles-for-polymaps">thread</a> of hope. The answer, <a href="http://tilestache.org/">TileStache</a> { &lt;&#8211; Imagine that&#8217;s a mustache on it&#8217;s side.</p>

<blockquote><p>TileStache is a Python-based server application that can serve up map tiles based on rendered geographic data.</p></blockquote>

<!-- more -->


<p>By design, TileStache can be used to serve up stylish TMS tiles using <a href="http://mapnik.org/">mapnik</a> map files, and can also be used to locally cache remote-services via <a href="http://tilestache.org/doc/#providers">proxy</a>. What I&#8217;m most interested in though, is it&#8217;s ability to deploy vector tiles. So what are vector tiles? Think TMS tiles&#8230; but replace representations of the geometries through images, with <a href="http://geojson.org/">GeoJSON</a>. Pretty wild right? Specifically, the TileStache <a href="http://tilestache.org/doc/TileStache.Goodies.Providers.PostGeoJSON.html">PostGeoJSON Provider</a> can be used to connect TileStache to a PostGIS data source, and return a tile comprised entirely of GeoJSON data.</p>

<p>For example, data from a PostGIS data source can be rendered as an image tile (&#8230;/10/16/357.png), like this:</p>

<p><a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/02/tile.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/02/tile.png" alt="" /></a></p>

<p>But can also be represtented as a vector tile (&#8230;/10/16/357.json), like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// Subset of a single 256x256 pixel vector tile.</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;FeatureCollection&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;features&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;geometry&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;MultiPolygon&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;coordinates&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>          <span class="p">[</span>
</span><span class='line'>            <span class="p">[</span>
</span><span class='line'>              <span class="p">[</span>
</span><span class='line'>                <span class="o">-</span><span class="mf">122.973093</span><span class="p">,</span>
</span><span class='line'>                <span class="mf">47.969842</span>
</span><span class='line'>              <span class="p">],...</span>
</span><span class='line'>              <span class="p">[</span>
</span><span class='line'>                <span class="o">-</span><span class="mf">122.973093</span><span class="p">,</span>
</span><span class='line'>                <span class="mf">47.969842</span>
</span><span class='line'>              <span class="p">]</span>
</span><span class='line'>            <span class="p">]</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;Feature&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;property_s&quot;</span><span class="o">:</span> <span class="s2">&quot;USFS&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;juris_name&quot;</span><span class="o">:</span> <span class="s2">&quot;Olympic National Forest&quot;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1280</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what are the advantages of using vector tiles? You can already use <a href="http://dev.openlayers.org/docs/files/OpenLayers/Format/GeoJSON-js.html">OpenLayers&#8217; GeoJSON</a> format reader to populate a vector layer in OL. It&#8217;s an issue of size. Highly complex geometries can be large in size, and requesting all that data at once can be time consuming. Vector tiles approach this problem using the same answer as TMS&#8230; only request those sections of data which you need at that time. By only requesting those tiles within the user&#8217;s current extent + a small buffer, the need to download large geometries at once can be negated. Furthermore, just as TMS&#8217;s can be pre-cached to disk (seeded), so can vector tiles.</p>

<p>One example of this is serving up a combined NFS boundary dataset compiled by my good pal, Greg (<a href="http://www.chopshopgeo.com/blog/">http://www.chopshopgeo.com/blog/</a>). These boundaries are <strong>dense</strong> and displaying them at their full extent &amp; raw level of detail is expensive. But by breaking the vector representations of these geometries up into a standard tile scheme, only those tiles which we need are requested, and only when we need them. As a side note, in addition to tiling, I also simplified the boundaries, to promote faster load time at small-scales. The least granular vector representations display at the smallest zoom-scales, while the highest (raw, unsimplified) level of granularity displays only at the largest zoom-scales.</p>

<p>[caption id=&#8221;attachment_398&#8221; align=&#8221;alignnone&#8221; width=&#8221;665&#8221; caption=&#8221;NFS Boundaries Provided By ChopShopGeo&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/02/parks.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/02/parks.png" alt="" /></a>[/caption]</p>

<p>Additionally, using vector representations of geometry rather then cached images allows styling of those geometries on the fly. <a href="http://polymaps.org/">Polymaps</a>, the only display client I&#8217;ve found so far that can consume vector tiles out-of-the-box, renders these tiles as SVG elements. Because of this, unique styling can be applied via CSS; controlling the color, stroke, fill, etc. of each geometry in response to both attributes associated with the geometry (see image below) or user input&#8230; ala the <a href="http://polymaps.org/ex/statehood.html">Polymaps example page</a>.</p>

<p>[caption id=&#8221;attachment_393&#8221; align=&#8221;alignnone&#8221; width=&#8221;691&#8221; caption=&#8221;USGS real-time gauge stations. Darker dots represent stronger streamflow, lighter dots represent slower flow. You&#8217;ll have to ignore the fact that I&#8217;m symbolizing streamflow without the streams.&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/02/usgs.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2011/02/usgs.png" alt="" /></a>[/caption]</p>

<p>The above example converts data from the <a href="http://waterservices.usgs.gov/rest/WOF-IV-Service.html">USGS Instantaneous Values Web Service</a> (part of the <a href="http://waterdata.usgs.gov/nwis/">USGS Water Date for the Nation program</a>) as a JSON response to GeoJSON. These data points are then symbolized dynamically using Polymaps. More on that later.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'><span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;FeatureCollection&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;features&quot;</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'><span class="s2">&quot;geometry&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'><span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;MultiPolygon&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;coordinates&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'><span class="p">[</span><span class="o">-</span><span class="mf">122.973093</span><span class="p">,</span> <span class="mf">47.969842</span><span class="p">],</span>
</span><span class='line'><span class="p">[</span><span class="o">-</span><span class="mf">122.973093</span><span class="p">,</span> <span class="mf">47.969842</span><span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="nx">http</span><span class="o">:</span> <span class="c1">//jsbeautifier.org/</span>
</span><span class='line'><span class="s2">&quot;type&quot;</span><span class="o">:</span> <span class="s2">&quot;Feature&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;properties&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'><span class="s2">&quot;property_s&quot;</span><span class="o">:</span> <span class="s2">&quot;USFS&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;juris_name&quot;</span><span class="o">:</span> <span class="s2">&quot;Olympic National Forest&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s2">&quot;id&quot;</span><span class="o">:</span> <span class="mi">1280</span>
</span><span class='line'><span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cURL'ing to FeatureServer from PostGIS: Easier then I Thought]]></title>
    <link href="http://mkgeomatics.github.io/blog/2010/07/09/curling-to-featureserver-from-postgis-easier-then-i-thought/"/>
    <updated>2010-07-09T05:25:40-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2010/07/09/curling-to-featureserver-from-postgis-easier-then-i-thought</id>
    <content type="html"><![CDATA[<p>So I&#8217;ve finished cutting a draft tileset using mapnik, <a href="http://mkgeomatics.com/apps/bus/bus.html">depicting bus routes in Bellingham, WA</a>. Now that the cartography is well in progress, I&#8217;d like to add some interactivity to the map. My first attempt at this will be to utilize MetaCarta (Chris Schmidt)&#8217;s <a href="http://featureserver.org/">FeatureServer</a>. <!-- more --> FeatureServer allows one to use standard HTTP verbs to GET representations of data, POST new data, or DELETE existing data. While querying data you can also pass additional URL parameters like a bounding box or attribute to select out a smaller subset of returned representations. I&#8217;ll be POST&#8217;ing a bus stop dataset to FeatureServer as GeoJSON. Once the data are stored in FeatureServer, I&#8217;ll be able to add popups based on a user&#8217;s click of a bus stop. <!-- more --></p>

<p>Getting data stored on my local PostGIS install to my remote FeatureServer instance turned out to be a three step process.</p>

<p><strong>Step One:</strong> Convert local PostGIS bus stops layer to GeoJSON via OGR</p>

<p>I had originally planned on writing a pg/plsql function to try and output a bash script. The script would cURL each feature individually to my FeatureServer instance. This proved to be way more work then I had expected. What was the solution? <a href="http://www.gdal.org/ogr/">OGR</a>, of course. OGR has read/write drivers for both <a href="http://www.gdal.org/ogr/drv_geojson.html">GeoJSON</a> and <a href="http://www.gdal.org/ogr/drv_pg.html">PostGIS</a>. This allows one to convert an entire dataset to GeoJSON with a single command (see below).</p>

<p>[sourcecode language=&#8221;bash&#8221;]
ogr2ogr -f &#8220;GeoJSON&#8221; ogrstops.json PG:&#8221;host=localhost dbname=routing user=postgres password=*** port=5432&#8221; &#8220;wtastops(the_geom)&#8221;
[/sourcecode]</p>

<p><strong>Step 2:</strong> Wrap &#8220;coordinate&#8221; elements in double brackets</p>

<p>When initially trying to cURL the GeoJSON output to FeatureServer, I was receiving an error stating that a bounding box could not be determined for the first geometry in my dataset. After some trial-and-error, I soon realized that the OGR output FeatureCollection was wrapping each point feature&#8217;s geometry in a single set of brackets. This type of behavior follows the GeoJSON <a href="http://geojson.org/geojson-spec.html#id9">specification for a FeatureCollection</a>, as far as I can tell. However, in order for FeatureServer to consume this dataset, each point feature is required to be wrapped in a second set of brackets. I used gedit to run the find/replace. Below is an example of a GeoJSON feature which FeatureServer can consume. This individual feature is part of a larger FeatureCollection.</p>

<p>[sourcecode language=&#8221;js&#8221;]</p>

<p>{ &#8220;type&#8221;: &#8220;Feature&#8221;,</p>

<pre><code>      "properties": {
         "POINT_ID": "1000",
         "POINT_NAME": "Fielding at 32nd",
         "SHELTER": "Yes", "BENCH": "No" },
      "geometry": {
         "type": "Point",
         "coordinates": [[-122.474490,48.730021]]}
</code></pre>

<p>}
[/sourcecode]</p>

<p><strong>Step 3:</strong> cURL GeoJSON to FeatureServer</p>

<p>The last step is to actually POST the data to FeatureServer. For that, I used cURL.</p>

<p>[sourcecode language=&#8221;bash&#8221;]</p>

<p>curl -d @ogrstops.json http://mkgeomatics.com/cgi-bin/featureserver/featureserver.cgi/scribble/create.json</p>

<p>[/sourcecode]</p>

<p>Now that the features have been uploaded, we can view them via FeatureServer as <a href="http://mkgeomatics.com/cgi-bin/featureserver/featureserver.cgi/scribble/all.georss">GeoRSS</a>, <a href="http://mkgeomatics.com/cgi-bin/featureserver/featureserver.cgi/scribble/all.kml">KML</a>, <a href="http://mkgeomatics.com/cgi-bin/featureserver/featureserver.cgi/scribble/all.json">JSON</a>, <a href="http://mkgeomatics.com/cgi-bin/featureserver/featureserver.cgi/scribble/all.gml">GML</a>. Neat!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PL/pgSQL function to Iterate pgRouting]]></title>
    <link href="http://mkgeomatics.github.io/blog/2010/06/28/plpgsql-function-to-iterate-pgrouting/"/>
    <updated>2010-06-28T00:37:39-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2010/06/28/plpgsql-function-to-iterate-pgrouting</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been working on a side project using <a href="http://www.mkgeomatics.com/wordpress/?s=pgRouting&amp;searchsubmit=Find">pgRouting</a> to determine the least-cost path across a street network from a given building to the nearest bus stop within <a href="http://en.wikipedia.org/wiki/Bellingham,_Washington">Bellingham, WA</a>. It&#8217;s one thing to execute pgRouting&#8217;s built-in functions for a single vertex (building) to another vertex (bus stop)&#8230; but another to have the function iterate through all buildings and their closest bus stop. <!-- more --></p>

<p>So that began my first experience with using PL/pgSQL. The benefit for using the procedural language for PostgreSQL lies in its ability to loop through collections of records easily. I&#8217;ve posted my function below. It&#8217;s not pretty, but it&#8217;s filled with enough notices to let me know where an error occurs, which helped me understand how things were acting each step of the way. Here is the basic idea:</p>

<ul>
<li><p>Loop through a table in which each row has a source and destination vertex</p></li>
<li><p>Execute the pgRouting function using these two vertices, determining the length of the least-cost path.</p></li>
<li><p>Populate a field, &#8216;dist_calc&#8217; with the distance.</p></li>
</ul>


<p>[sourcecode]
CREATE OR REPLACE FUNCTION bulk_route_generate() RETURNS VOID AS $$
DECLARE
 bld_row bld_wtastops_staging5%ROWTYPE;
 dist_calc RECORD;
BEGIN
 RAISE NOTICE &#8216;Beginning Function&#8217;;
 FOR bld_row IN SELECT * FROM bld_wtastops_staging5 WHERE bld_wtastops_staging5.bld_vert_node IS NOT NULL
 AND bld_wtastops_staging5.wtastops_vert_node IS NOT NULL
 &#8211; BEGIN ADDING BUM NODES TO SKIP OVER
 AND bld_wtastops_staging5.bld_vert_node &lt;&gt; 2915
 AND bld_wtastops_staging5.wtastops_vert_node &lt;&gt; 293
 &#8211; ADD START GID
 &#8211; USED ONLY IF BUM NODES EXIST
 &#8211;AND bld_wtastops_staging5.bld_gid &gt;= 29200
 ORDER BY bld_wtastops_staging5.bld_gid LOOP
 RAISE NOTICE &#8216;Value of wtastops_vert_node is %. The value of bld_vert_node is %&#8217;,bld_row.wtastops_vert_node, bld_row.bld_vert_node;
 RAISE NOTICE &#8216;Value of wtastops_gid is %. The value of bld_gid is %&#8217;,bld_row.wtastops_gid, bld_row.bld_gid;
 &#8211; BEGIN STANDARD pgRouting A*Star FUNCTION
 SELECT SUM(cost) INTO dist_calc FROM shortest_path_astar(&#8217;
 SELECT gid as id,
 source::integer,
 target::integer,
 length::double precision as cost,
 x1, y1, x2, y2
 FROM streets_9102748&#8217;,
 bld_row.bld_vert_node, bld_row.wtastops_vert_node, false, false);
 RAISE NOTICE &#8216;Value of dist_calc is %.&#8217;,dist_calc;
 EXECUTE &#8216;UPDATE bld_wtastops_staging5
 SET route_dist = &#8217; ||dist_calc|| &#8217;
 WHERE &#8217; ||bld_row.bld_gid|| &#8217; = bld_wtastops_staging5.bld_gid&#8217;;
 END LOOP;
 &#8211; BAIL OUT ON ERRORS
 EXCEPTION
 WHEN CONTAINING_SQL_NOT_PERMITTED THEN
 RAISE NOTICE &#8217; EXECPTION Value of wtastops_vert_node is %. The value of bld_vert_node is %&#8217;,bld_row.wtastops_vert_node, bld_row.bld_vert_node;
END;
$$ LANGUAGE &#8216;plpgsql&#8217;;
&#8211; EXECUTE FUNCTION
SELECT bulk_route_generate();
[/sourcecode]</p>

<p>I&#8217;m excited at the possibilities that using PL/pgSQL offers in terms of manipulating data. I&#8217;m sure that the above function can be cleaned up quite a bit, too. If I ever have the need to re-visit this or similar problems, I&#8217;ll be sure to do some serious head-scratching to think about a better approach!</p>

<p>Here is an image of the resulting data generated using <a href="http://mapnik.org/">mapnik</a>. Areas from dark green to light-green are within a 1/4 mile distance, while areas from yellow-to-red represent distances increasingly greater then a 1/4 mile. The large checkered areas are where the dataset failed to route. More on that at another time.</p>

<p>[caption id=&#8221;attachment_360&#8221; align=&#8221;alignnone&#8221; width=&#8221;430&#8221; caption=&#8221;the result as seen in mapnik&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/06/bld_sym_diverging_web.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/06/bld_sym_diverging_web.png" alt="bld_sym_diverging_web" /></a>[/caption]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pgRouting III: PHP + OpenLayers Interface]]></title>
    <link href="http://mkgeomatics.github.io/blog/2010/02/06/pgrouting-iii-php-openlayers-interface/"/>
    <updated>2010-02-06T09:47:11-08:00</updated>
    <id>http://mkgeomatics.github.io/blog/2010/02/06/pgrouting-iii-php-openlayers-interface</id>
    <content type="html"><![CDATA[<p>With the routing <a href="http://www.mkgeomatics.com/wordpress/?p=312">database configured and populated</a>, and with <a href="http://www.mkgeomatics.com/wordpress/?p=322">geoserver rendering the WMS</a>, now the focus can shift on designing the actual display and functionality.</p>

<p>The conceptual plan is as follows: <!-- more --></p>

<ul>
<li><p>Extract the geometry of a user&#8217;s click on the map.</p></li>
<li><p>Pass the extracted geometry to a PHP script, via an HTTP GET request.</p></li>
<li><p>Use the PHP script to pass the geometry as part of an SQL query against the PostGIS/pgRouting database.</p></li>
<li><p>Return the geometry from the database as <a href="http://geojson.org/">GeoJSON</a>, and deserialize it into an OpenLayers vector layer feature.</p></li>
</ul>


<p>The code to extract a user&#8217;s clicked coordinates was taken from <a href="http://openlayers.org/dev/examples/click.html">this</a> OpenLayers example. It was then modified to pass the xy coordinates to a second function, designed to create a URL which will execute a PHP script.</p>

<p>[sourcecode language=&#8221;javascript&#8221;]trigger: function(e) {
 var xy = map.getLonLatFromViewPortPx(e.xy);
 executeSQL(xy);
 }[/sourcecode]</p>

<p>Passing the XY variable to the executeSQL() function, we are able to now seperate out the individual X and Y coordinates, and apply them to their respective parameters in our URL string.</p>

<p>[sourcecode language=&#8221;javascript&#8221;]// Build the URL
 var json_url = &#8220;http://localhost/near_vertex_astar.php?&#8221;;
 json_url += &#8220;x=&#8221; + escape(xy.lon);
 json_url += &#8220;&amp;y=&#8221; + escape(xy.lat);[/sourcecode]</p>

<p>Having constructed the URL, we are now ready to use it to populate an OpenLayers vector layer with data.</p>

<p>[sourcecode language=&#8221;javascript&#8221;]// Make a fresh vector layer, pulling features from our script URL
 json_layer = new OpenLayers.Layer.Vector(&#8220;GeoJSON&#8221;, {
 styleMap: myStyles,
 strategies: [new OpenLayers.Strategy.Fixed()],
 protocol: new OpenLayers.Protocol.HTTP({
 url: json_url,
 format: new OpenLayers.Format.GeoJSON()
 })
 });[/sourcecode]</p>

<p>Alright! So where are we at right now? A user has clicked the map, and that click&#8217;s geometry has been extracted and sent to a PHP script on the server for further work. The PHP script will execute SQL in the PostGIS/pgRouting data base to do the following:</p>

<ul>
<li><p>Find the closest vertex in our routing network to the user&#8217;s map click. This will be used as a source vertex.</p></li>
<li><p>Find all firestations within 5km of the vertex (which have been pre-attributed with the closest vertex on the routing network to their location).</p></li>
<li><p>Calculate the cost (as defined by total length of the route) from the source vertex to each fire station (really the routing network vertex).</p></li>
<li><p>Return back as GeoJSON only the geometry for the route with the lowest cost.</p></li>
</ul>


<p>Why all the hassle with determining the cost? Can&#8217;t you just use PostGIS&#8217; ST_DWithin() function to find the closet firestation to our user&#8217;s click and create the route? Well you could, but it might not always be the shortest route.</p>

<p>[caption id=&#8221;attachment_339&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Euclidean distance versus Manhattan. Which one is shorter?&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/02/distance.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/02/distance-300x279.png" alt="Euclidean distance versus Manhattan. Which one is shorter?" /></a>[/caption]</p>

<p>This behavior can be respresented in the routing network with the example below. Two different routes are generated from the same source vertex based on the combination of routing algorithm and account for route cost. On the left, the <a href="http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm">dijkstra algorithm</a> is used to return the route to the closest fire station as the result of an ST_DWithin() query. On the right, the A-Star algorithm is used, and the route costs of all fire stations within a buffer are taken into account. As we can see, a different route and a different station are returned.</p>

<p><a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/02/dj_left_astar_right1.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/02/dj_left_astar_right1-1024x338.png" alt="Comparing the two search algorithms and cost relationships." /></a></p>

<p>A link to the JS and PHP scripts can be found at the end of this post. This definitely is not the most elegant solution to working with routing, but in terms of an experiment it was a great learning exercise. I&#8217;m really excited to dive deeper into PostGIS and pgRouting. The next step in the process will be incorporating OSM data, and adding in addition attributes which affect cost (speed limits, one-way streets, etc).</p>

<p>View the <a href="http://mkgeomatics.com/apps/syntaxhighlighter/astar_php.html">PHP</a>.</p>

<p>View the <a href="http://mkgeomatics.com/apps/syntaxhighlighter/astar.html">OL JS</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pgRouting Part II: PostGIS + Geoserver]]></title>
    <link href="http://mkgeomatics.github.io/blog/2010/01/31/pgrouting-part-ii-postgis-geoserver/"/>
    <updated>2010-01-31T05:05:32-08:00</updated>
    <id>http://mkgeomatics.github.io/blog/2010/01/31/pgrouting-part-ii-postgis-geoserver</id>
    <content type="html"><![CDATA[<p>Since compiling <a href="http://pgrouting.postlbs.org/">Orkney&#8217;s pgRouting extension</a> to PostgreSQL/PostGIS, I&#8217;ve decided to try my hand at creating a simple web interface to poke into the database. The current setup is as follows: <!-- more --></p>

<ul>
<li><p>Display: OpenLayers</p></li>
<li><p>Renderer: Geoserver (via non-cached WMS)</p></li>
<li><p>Spatial Backend: PostGIS/pgRouting enabled PostgreSQL</p></li>
<li><p>Data: <a href="http://www.cob.org/services/maps/gis/index.aspx">Public GIS data</a> from the city of Bellingham, Washington&#8217;s GIS department.</p></li>
</ul>


<p>For the sake of brevity, (but really because both TOPP has created some <a href="http://workshops.opengeo.org/opengeo-stack/">fantastic guides</a>) I won&#8217;t go into the specifics of installing all the pieces. Just as an FYI, remember to set your &#8216;JAVA_HOME&#8217; environment variable and make sure that you don&#8217;t have things trying to use the same port!</p>

<p>The Bellingham data is currently stored in <a href="http://www.spatialreference.org/ref/esri/102748/">NAD83 State Plane WA North Feet</a>, a typical projection for this area. This projection however, is not part of the EPSG projection set, and as such is not included in a vanilla install of PostGIS.</p>

<p>In order to add this to the collection of spatial reference systems used by my PostGIS install, I went with the ridiculously cool <a href="http://spatialreference.org">spatialreference.org</a> site (A <a href="http://crschmidt.net/">crschmidt</a>, <a href="http://dbsgeo.com/">dbsgeo</a>, <a href="http://hobu.biz/">hobu</a>, and <a href="http://umbrellaconsulting.com/">umbrella</a> joint, hah). Navigating to the projection&#8217;s page gives me the option to generate an <a href="http://www.spatialreference.org/ref/esri/102748/postgis/">INSERT</a> statement, adding the projection&#8217;s info into my database.</p>

<p>To load shapefiles into the PostGIS database, I chose to use the SPIT plugin for QGIS. Loading the data was fairly straightforward. I had an issue with a datefield that was present in the source shapefile, and had to delete the column manually using Open Office Database. I haven&#8217;t found a way to delete fields from a shapefile using QGIS.</p>

<p>[caption id=&#8221;attachment_327&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;The SPIT Interface&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/01/spit.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/01/spit-300x175.png" alt="spit" /></a>[/caption]</p>

<p>After uploading the streets data into my PostGIS database, the next step was to transform the geometry into the Web Mercator 900913 Projection. This was done using standard PostGIS functions, adding a new, second, geometry column to the existing streets table. This reprojected data was then exported from my staging PostGIS database as a shapefile using the QGIS, &#8216;Save As Shapefile&#8217; tool, and re-imported into my production database (with the routing functions).</p>

<p>With data stored in the web mercator projection, inside of our PostGIS/pgRouting database, the next step was to add the layers to Geoserver. Using Geoserver 2.x, the process included the following steps (all done through the web-admin).</p>

<ul>
<li><p>Add the new data store pointing the PostGIS database.</p></li>
<li><p>Add new layers (resources) which point to the tables of interest in our PostGIS database.</p></li>
</ul>


<p>After creating the connections between PostGIS and Geoserver, the creation of WMS services is taken care of, allowing us to roll them into OpenLayers with relative ease.</p>

<p>I guess this got a little off-topic from what I originally wanted to write about. I think that I&#8217;ll save the actual breakdown of my OL code (taking a user&#8217;s map click to and using it to calculate a route to the nearest fire-station as determined by manhattan distance, as opposed to euclidean distance) for another day.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pgRouting On Ubuntu Netbook Remix 9.10]]></title>
    <link href="http://mkgeomatics.github.io/blog/2010/01/11/pgrouting-on-ubuntu-netbook-remix-9-10/"/>
    <updated>2010-01-11T14:26:59-08:00</updated>
    <id>http://mkgeomatics.github.io/blog/2010/01/11/pgrouting-on-ubuntu-netbook-remix-9-10</id>
    <content type="html"><![CDATA[<p>While working through Regina Obe and Leo Hsu&#8217;s <a href="http://www.postgis.us">PostGIS In Action</a> I thought that I&#8217;d jump into the world of routing. My plan was to develop a sample application that could be used to plan bicycle routes throughout the city of Seattle. A quick google search proved that someone has already done it, and done it very well! <a href="http://www.ridethecity.com/">http://www.ridethecity.com/</a> provides cycling routes using OSM data for many major cities, Seattle included. <!-- more --></p>

<p>Undeterred and inspired, i decided to compile the <a href="http://pgrouting.postlbs.org/">pgRouting</a> set of tools for PostGIS and give them a whirl.</p>

<p>My primary tutorial for moving through the install and execution of functions came from the 2009 FOSS4G Tokyo &amp; Osaka workshop entitled, &#8221;<a href="http://www.google.com/url?sa=t&amp;source=web&amp;ct=res&amp;cd=7&amp;ved=0CCMQFjAG&amp;url=http%3A%2F%2Fwww.osgeo.jp%2Fwordpress%2Fwp-content%2Fuploads%2F2009%2F11%2Fworkshop_manual.pdf&amp;ei=4vdLS63EKIGSsgPFrsGIDA&amp;usg=AFQjCNEoTXqRqtS8fpDXbNLo6H2Nk3cEyg&amp;sig2=RLw7qVqUev7k8pdvzCjXeQ">FOSS4G routing with pgRouting tools and OpenStreetMap road data.</a>&#8221; Although my installation on Ubuntu Netbook Remix (UNR) 9.10 required a little different setup, this guide definitely got me 99% of the way there.</p>

<p>The majority of my installation woes were caused by the different pathways used on my UNR install of PostgreSQL vs. what are apparently the standard paths.</p>

<p>After attempting to execute cmake to compile pgRouting, I&#8217;d be presented with an error stating that the &#8216;POSTGRESQL_INCLUDE_DIR&#8217; was not found. A locate command pointed me to the correct path for my PostgreSQL installation. By modifying the FindPostgreSQL.cmake file to search for the correct path, I was back in business.</p>

<p>Following the workshop instructions, I then attempted to create the database directly from the terminal, which yielded the following result.</p>

<p>[sourcecode language=&#8221;bash&#8221;]matt@matt-netbook:~$ createdb -U postgres routing
createdb: could not connect to database postgres: could not connect to server: No such file or directory
 Is the server running locally and accepting
 connections on Unix domain socket &#8220;/var/run/postgresql/.s.PGSQL.5432&#8221;?[/sourcecode]</p>

<p>After reading the documentation associated with &#8220;createdb&#8221;, i tried adding the &#8220;-h&#8221; flag pointing to &#8220;localhost&#8221;, which solved the problem.</p>

<p>The final error which I ran into had to do with the &#8220;$libdir&#8221; environment variable. While trying to register the pgRouting functions in my new database, I&#8217;d be presented with the following:</p>

<p>[sourcecode language=&#8221;bash&#8221;]psql:/usr/share/postlbs/routing_core.sql:32: ERROR:  could not access file &#8220;$libdir/librouting&#8221;: No such file or directory
psql:/usr/share/postlbs/routing_core.sql:43: ERROR:  could not access file &#8220;$libdir/librouting&#8221;: No such file or directory
psql:/usr/share/postlbs/routing_core.sql:53: ERROR:  could not access file &#8220;$libdir/librouting&#8221;: No such file or directory[/sourcecode]</p>

<p>Getting impatient at this point (i wanted to route!) I modified the SQL files to reference the explicit path of my PostgreSQL lib directory. Once that was done, I had a working routing database!</p>

<p>Loading the sample data, creating the indexes, and executing the queries was amazingly straightforward. To test visualizing the data, I exported one of the tutorial queries directly into a new table.</p>

<p>[sourcecode language=&#8221;SQL&#8221;]SELECT * INTO export
 FROM dijkstra_sp(&#8216;ways&#8217;, 10, 20);[/sourcecode]</p>

<p>[caption id=&#8221;attachment_316&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;The route depicted in red as seen in QGIS.&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/01/qgis_routing.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/01/qgis_routing-300x175.png" alt="qgis_routing" /></a>[/caption]</p>

<p>Just for kicks, I tried exporting the data as GeoJSON and visualzing it via OpenLayers.</p>

<p>The following SQL query aggregates the exported line segments into a single GeoJSON object:</p>

<p>[sourcecode language=&#8221;SQL&#8221;]SELECT ST_AsGeoJSON(ST_UNION(the_geom)) AS geom_union
FROM export;[/sourcecode]</p>

<p>Using the <a href="http://openlayers.org/dev/examples/vector-formats.html">vector-formats</a> OL example, which displays GeoJSON in either EPSG 4326 or 102113, I was able to visualize the line segment with no problem.</p>

<p>[caption id=&#8221;attachment_317&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;GeoJSON representation of line segment generated using pgRouting, displayed in OpenLayers&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/01/openlayers_vector_formats.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2010/01/openlayers_vector_formats-300x175.png" alt="" /></a>[/caption]</p>

<p>Well that&#8217;s all for one day. So it looks like the bike riding app is out, but I&#8217;m sure that there will be many more interesting ideas for pgRouting that will come to mind as I continue to explore PostGIS.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ESRI UC Student Assistant, Sweet!]]></title>
    <link href="http://mkgeomatics.github.io/blog/2009/04/27/esri-uc-student-assistant-sweet/"/>
    <updated>2009-04-27T03:13:59-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2009/04/27/esri-uc-student-assistant-sweet</id>
    <content type="html"><![CDATA[<p>Just found out that I&#8217;ll be participating in the 2009 ESRI UC as a student assistant. Big thanks go out to <a href="http://geography.asu.edu/balling">Dr. Robert Balling</a> and <a href="http://www.spatiallyadjusted.com/">James Fee</a>, who both wrote letters of recommendation for me.</p>

<p>Now to get back to more pressing matters, like refactoring this giant wad o&#8217; javascript. <!-- more --></p>

<p>See you in San Deigo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing An Existing MySQL Database]]></title>
    <link href="http://mkgeomatics.github.io/blog/2009/04/22/visualizing-an-existing-mysql-database/"/>
    <updated>2009-04-22T08:43:21-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2009/04/22/visualizing-an-existing-mysql-database</id>
    <content type="html"><![CDATA[<p>So I&#8217;ve been working for about a month with a fairly-normalized (53-table) database in which I draw out all kinds of tabular information, and display it in a spatial context. This has required the numerous multiple table joins, with all kinds of weird relationships&#8230; you know, the kind that usually don&#8217;t work out very well? <!-- more --></p>

<p>In any event, my SOP for handling these queries was to submit sample data through the codeigniter site that our project&#8217;s web developer has been courageously firing away at. In this sense, I&#8217;d sort-of trace the flow of new information through the various tables of the database, monitoring the information stream as best as I could. I thought to myself, that there has to be a better way to handle this stuff! In comes the <a href="http://dev.mysql.com/workbench/">MySQL Workbench</a>. This handy tool from the <a href="http://dev.mysql.com/">MySQL Dev Zone</a> apparently comes in two flavors: FOSS and commercial.</p>

<p>The free version served my visualization needs perfectly. The layout of the program is very solid. I was easily able to take an SQL export of the existing database and import it into the Workbench, through a tool they call &#8216;Reverse Engineer MySQL Create Script&#8217;. Once the schema has been injected into the program, a model can be automatically created containing all of the tables as well as relationships. The auto-layout feature however, leaves a lot to be desired.</p>

<p>[caption id=&#8221;attachment_293&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: Automatic Layout Results, Snazzy!&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/initial_layout.jpeg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/initial_layout-300x189.jpg" alt="Above: Automatic Layout Results, Snazzy!" /></a>[/caption]</p>

<p>After about twenty-minutes of fooling with the table graphics, a usable layout can be produced. One feature that I think is really convenient, but will never use, is the automatic setting of the diagram width and height based on numbers of pages. This is useful for those who need a quick-print out of their database for whatever reason.</p>

<p>[caption id=&#8221;attachment_292&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: Workbench w/ Completed Diagram&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/workspace.jpeg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/workspace-300x187.jpg" alt="Above: Workbench w/ Completed Diagram" /></a>[/caption]</p>

<p>The real benefit for me however, is the automatic highlighting of key values linking tables together. I&#8217;m now able to quickly work my way from the table I need to get to, drilling backwards until I see the table I need to start with.</p>

<p>[caption id=&#8221;attachment_294&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: Automatically Highlight The Key Fields Between Two Tables.&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/linking_tables.jpeg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/linking_tables-300x147.jpg" alt="Above: Automatically Highlight The Key Fields Between Two Tables." /></a>[/caption]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MetaCarta's Map Rectifier + ESRI DevSummit Mashup Winner :)]]></title>
    <link href="http://mkgeomatics.github.io/blog/2009/04/08/metacartas-map-rectifier-esri-devsummit-mashup-winner/"/>
    <updated>2009-04-08T08:24:07-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2009/04/08/metacartas-map-rectifier-esri-devsummit-mashup-winner</id>
    <content type="html"><![CDATA[<p>I never knew about the <a href="http://labs.metacarta.com/rectifier/">MetaCarta Labs&#8217; Map Rectifier</a> tool, but I&#8217;ll expect to be using it more in the future. After uploading an image to the site, a user has full control over the creation of Ground Control Points. The advanced nature of this tool is shown though included RMS error reporting as well as the choice between multiple transformation algorithms. <!-- more --> In addition to uploading your own content, a user has the ability to add GCPs for other users&#8217; uploads as well.</p>

<p>[caption id=&#8221;attachment_276&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: The MetaCarta Interface&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/metacarta.jpg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/metacarta-300x170.jpg" alt="Above: The MetaCarta Interface" /></a>[/caption]</p>

<p>What&#8217;s really amazing is the ability to directly access rectified images via WMS overlay. Each image hosted on the site is given a unique URL, we can insert into our favorite web mapping clients.</p>

<p>To try it out, I used the <a href="http://resources.esri.com/arcgisserver/apis/javascript/gmaps/index.cfm?fa=codeGalleryDetails&amp;scriptID=16067">ExtMap - Mashup Framework</a> developed by ArcGIS user <a href="http://resources.esri.com/arcgisserver/apis/javascript/gmaps/index.cfm?fa=codeGallery&amp;authorID=alperdincer">alperdincer</a>. This particular application framework was one of the winners at 2009 ESRI DevSummit, with good reason. I was able to quickly pass in the MetaCarta Labs URL, allowing the ExtMap application to consume and display the WMS layer with ease.</p>

<p>[caption id=&#8221;attachment_278&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: Adding a Service to ExtMap&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/add_service.jpg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/add_service-300x158.jpg" alt="Above: Adding a Service to ExtMap" /></a>[/caption]</p>

<p>In addition to WMS layers, we can add in KML/GeoRSS as well as ArcGIS Server Dynamic/Tiled Map Layers.</p>

<p>[caption id=&#8221;attachment_279&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: ExtMap Interface&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/extjs.jpg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/extjs-300x187.jpg" alt="Above: ExtMap Interface" /></a>[/caption]</p>

<p>Easy as pie? Piece of Cake? Yes. It&#8217;s innovative projects like these that keep pushing me to learn more about web mapping technology. Big thanks go out to <a href="http://">crschmidt</a> (who i assumed was involved w/ the project) at MetaCarta and <a href="http://resources.esri.com/arcgisserver/apis/javascript/gmaps/index.cfm?fa=codeGallery&amp;authorID=alperdincer">alperdincer</a> for putting together two great products.</p>

<p>On a final note, the MetaCarta Rectifier has the ability to export out images as geotiffs, allowing us to consume them in our desktop GIS applications. A quick check in ArcCatalog of the Chernobyl sample image I exported out revealed a WGS84 GCS. I can see some really nice workflows combining this tool with tiling programs such as <a href="http://www.klokan.cz/projects/gdal2tiles/">GDAL2Tiles</a> for painless TMS creation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloudMade Tile Request Graphics]]></title>
    <link href="http://mkgeomatics.github.io/blog/2009/04/07/cloudmade-tile-request-graphics/"/>
    <updated>2009-04-07T10:14:36-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2009/04/07/cloudmade-tile-request-graphics</id>
    <content type="html"><![CDATA[<p>I just found a neat feature from CloudMade, a <a href="http://maps.cloudmade.com/stats/tile_requests">heat map</a> showing intensity of their tile requests at each zoom scale. As can be expected, Europe and North America are the definite zones of high activity. It&#8217;s also interesting to note the high activity in other regions such as Chile and the Philippines. <!-- more --></p>

<p>[caption id=&#8221;attachment_272&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: CloudMade&#8217;s Tile Request Graphic&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/cm_tile_request.jpg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/04/cm_tile_request-300x187.jpg" alt="Above: CloudMade's Tile Request Overlay" /></a>[/caption]</p>

<p>Following the link to the <a href="http://maps.cloudmade.com/javascripts/stats/cloudmade.js?1238766232">stats JavaScript</a>, it looks like they are using a custom OpenLayers layer class, OpenLayers.Layer.Cloudmade. Sweet!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpatialLite: My First Look]]></title>
    <link href="http://mkgeomatics.github.io/blog/2009/04/05/spatiallite-my-first-look/"/>
    <updated>2009-04-05T05:45:46-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2009/04/05/spatiallite-my-first-look</id>
    <content type="html"><![CDATA[<p>With such a small footprint (a single file) <a href="http://www.gaia-gis.it/spatialite/">SpatialLite</a> appears to a novice like myself to be a fantastic niche storage solution for spatial data. In an environment where installing larger FOSS databases such as MySQL or PostGIS/PostgreSQL can be prohibitive, Spatial Lite appears to provide a great solution. Using the provided GUI interface, <!-- more --> it&#8217;s extremely easy for a first-time user to create an sqllite dbase, load multiple shapefiles, and create spatial indexes against them. Analogous to a FOSSGIS ESRI Geodatabase, I can see a lot of potential uses for GIS developers who require the indexing and searching power of a database as well as the portability of formats such as an ESRI Shapefile or KML.</p>

<p>It looks like a <a href="http://geobabble.wordpress.com/2009/03/26/spatiallite-support-in-qgis/">QGIS connection</a> is in the works for the 1.1 release as well.</p>

<p>I&#8217;m not sure if it&#8217;s already being done, but I&#8217;d bet that it would be pretty easy to put together a SpatialLite / <a href="http://featureserver.org/">FeatureServer</a> combination, considering its native support for so many spatial-backends.</p>

<p>Some tutorials I&#8217;ve found to be very helpful have come from: <a href="http://www.bostongis.com/PrinterFriendly.aspx?content_name=spatialite_tut01">BostonGIS</a> and the <a href="http://www.gaia-gis.it/spatialite/spatialite-2.2_tutorial.html">SpatialLite project site</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ArcGIS REST API / OpenLayers / Unit Testing = Fun In The Sun]]></title>
    <link href="http://mkgeomatics.github.io/blog/2009/03/13/arcgis-rest-api-openlayers-unit-testing-fun-in-the-sun/"/>
    <updated>2009-03-13T12:31:39-07:00</updated>
    <id>http://mkgeomatics.github.io/blog/2009/03/13/arcgis-rest-api-openlayers-unit-testing-fun-in-the-sun</id>
    <content type="html"><![CDATA[<p>Until today, I had never truly appreciated the value of unit testing. I recently had the need to bring <a href="http://dev.openlayers.org/sandbox/august/openlayers/openlayers-2.6/examples/ags/index.html">these ArcGIS REST controls</a>, designed for version 2.6 of OpenLayers, into the current development version. Having no real idea how to get started on this process, I looked to the unit tests as a guide <!-- more --> to what needed to be changed. One might be asking why this was necessary, when the team over at Avencia just put together a great <a href="http://trac.openlayers.org/ticket/1749">ArcGIS REST Plugin</a> that has made its way into the trunk for the upcoming 2.8 release. The answer is that both plugins do different things well. The older AGSControls can perform &#8216;Identify&#8217; and &#8216;Geoprocessing&#8217; operations rather well, while the Avencia plugin does a great job at displaying and querying a subset of a layer resource.</p>

<p>In any event, the <a href="http://straytree.com/TestAnotherWay/doc/index.html">Test.AnotherWay</a> suite, used by OpenLayers, provides an easy-to-navigate interface for debugging javascript code.</p>

<p>In two steps I was able to begin the debugging process.</p>

<p>First, adding the unit test for the AGSControl to the &#8216;list-tests.html&#8217; file located in the &#8216;tests&#8217; folder of a development version of OpenLayers. This unit test, written by the developer, needs to manually downloaded and incorporated into the standard series of tests that come with OpenLayers. As we can see from the image below, this particular test was written as an html file and placed into the &#8216;Control&#8217; sub-directory of the &#8216;tests&#8217; directory.</p>

<p>[caption id=&#8221;attachment_256&#8221; align=&#8221;alignnone&#8221; width=&#8221;224&#8221; caption=&#8221;Above: Adding a link to the unit test for use by Test.AnotherWay&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/03/list_test.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/03/list_test.png" alt="Adding a link to the unit test for use by Test.AnotherWay" /></a>[/caption]</p>

<p>After adding the test, we open up &#8216;run-tests.html&#8217; in the browser and select &#8216;AgsControl&#8217; from the list. After the test has executed, the results are provided to us. With the red light of failure burning bright, we might think to abandon all hope. We are, however, given the cause and location of the failure, an invaluable clue as to where to start debugging. Time to soldier on.</p>

<p>[caption id=&#8221;attachment_257&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: Unit Test Failure&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/03/ags_fail.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/03/ags_fail-300x98.png" alt="Above: Unit Test Failure" /></a>[/caption]</p>

<p>Using these test results as a road map, even I can eventually debug a plugin. The green light of success offers a reassuring reminder that all is well in the GIS world.</p>

<p>[caption id=&#8221;attachment_259&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: Successful Unit Test&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/03/ags_success1.png"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/03/ags_success1-300x112.png" alt="Above: Successful Unit Test" /></a>[/caption]</p>

<p>I&#8217;ve taken away a few things from this experience. Firstly, I&#8217;m again deeply impressed by the time and effort that developers in the Open Source community are putting into these projects. The only reason that I could even dream of modifying any of this source code is due to the fact that the developer of the AGSControls provided such detailed unit tests. These allowed me to wrap my brain around what was going on with the code, and how it could be updated. Taking the time to not only write code, but to also provide tools so that others can understand it and modify it with ease is something that I think I&#8217;ll always be impressed with. And of course, I&#8217;ll be continuing to rely on unit tests as debugging tools as i continue my exploration of javascript programming.</p>

<p>In the words of <a href="http://www.davebouwman.net/">Dave Bouwman</a>, who has a whopping fourteen posts in his tag cloud on the subject:</p>

<blockquote><p>Unit testing is quite possibly the single best practice for ensuring that your code is bug free (or very nearly bug free!).</p></blockquote>

<p>His &#8216;fundamentals&#8217; article provides a great introduction on the subject: which can be read <a href="http://www.davebouwman.net/fundamentals/unittesting.aspx">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Motion Charts: From Data To Information ]]></title>
    <link href="http://mkgeomatics.github.io/blog/2009/01/31/google-motion-charts-from-data-to-information/"/>
    <updated>2009-01-31T07:51:18-08:00</updated>
    <id>http://mkgeomatics.github.io/blog/2009/01/31/google-motion-charts-from-data-to-information</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been playing with the motion chart gadget in Google&#8217;s AJAX API Playground recently, and have found it to be an extremely interesting tool to use. In order to produce data rich charts, all that is necessary is to import a tabular datasheet into google docs and call on it within a javascript function. <!-- more --></p>

<p>The spreadsheet itself requires:</p>

<ul>
<li><p>The first column be entity data (place names, events, etc.)</p></li>
<li><p>The second column to be formatted as &#8216;Date&#8217;</p></li>
<li><p>The third and following columns to contain your chart-worthy data.</p></li>
</ul>


<p>A simple example can be found below depicting historical weather station information for three cities in the Western United States. This information was downloaded from the <a href="http://www.wrcc.dri.edu/">Western Regional Climate Center</a> and imported manually into a <a href="http://spreadsheets.google.com/ccc?key=pPDD5D7AqVH0jefmgJwF9OQ">google docs spreadsheet</a>. As we can see, we have a variety of different ways to explore the data, and hopefully, synthesize them into useful information for decision makers in a best case scenario.</p>

<p>Above: Markers indicate the cities in which weather station data was collected.</p>

<p>Above: Google Motion Chart Gadget. NOTE: The data are actually compiled monthly averages from 1971-2000. For the sake of simplicity however, i fed the date column in a format of &#8216;Jan-1&#8217; which turns out automatically appends the current year. The proper date should read for example, &#8216;1/1&#8217; rather than &#8216;1/1/09&#8217;.</p>

<p>In any event, in a data rich GIS environment, we can easily succumb to &#8216;data overload&#8217;. This creates a barrier for decision makers in understanding their situations, and as such can lead to poor planning. Through the careful use of data visualization tools such as this, however, decision makers can be empowered to quickly analyze data in a variety of ways, creating useful information on-the-fly and without the use of specialized GIS technical know-how.</p>

<p>At least I think that&#8217;s how it works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSM 'Minutely' Tile Updates: Thanks CloudMade!]]></title>
    <link href="http://mkgeomatics.github.io/blog/2009/01/24/osm-minutely-tile-updates-thanks-cloudmade/"/>
    <updated>2009-01-24T13:32:07-08:00</updated>
    <id>http://mkgeomatics.github.io/blog/2009/01/24/osm-minutely-tile-updates-thanks-cloudmade</id>
    <content type="html"><![CDATA[<p>Another great OSM Mapping Party is underway in Tempe Arizona. Brandon of <a href="http://www.cloudmade.com/">CloudMade</a> came out to run the show, with local hosting by <a href="http://www.spatiallyadjusted.com/">James Fee</a> of RSP Architects. Coffee, pizza, libations, and Open Source GIS provided a great foundation for lively discussion on the practical and philosophical aspects that OpenStreetMaps provides. <!-- more --></p>

<p>Of particular interest was a question posed by a first time OSM&#8217;er, who wondered why we had to wait a week for the tiles to render, just to see the results of some type of experiment that we might be trying out in the digitization and attribution of features in the map. Well, no one could really give him a good answer other then, &#8216;it&#8217;s just the way it is&#8217;.</p>

<p>It appears though, that CloudMade has provided us with an answer just the other day. The <a href="http://matt.sandbox.cloudmade.com/">Minutely Updated Tile Server</a> is updated &#8216;every minute from OpenStreetMap diffs&#8217;. The results can be seen below. The first image depicts the standard weekly update view while the bottom image depicts the minutely render. Note the presence of the additional buildings on ASU&#8217;s Tempe Campus.</p>

<p>[caption id=&#8221;attachment_241&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: OSM Weekly Update&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/01/weekly.jpeg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/01/weekly-300x242.jpg" alt="Above: OSM Weekly Update" /></a>[/caption]</p>

<p>[caption id=&#8221;attachment_242&#8221; align=&#8221;alignnone&#8221; width=&#8221;300&#8221; caption=&#8221;Above: CloudMade&#8217;s Minutely Updated Tile Server for OSM&#8221;]<a href="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/01/minutely.jpeg"><img src="http://www.mkgeomatics.com/wordpress/wp-content/uploads/2009/01/minutely-300x240.jpg" alt="Above: CloudMade's Minutely Updated Tile Server for OSM" /></a>[/caption]</p>

<p>Check out the full post from CloudMade&#8217;s blog here: <a href="http://blog.cloudmade.com/2009/01/23/nearly-live-tiles/">http://blog.cloudmade.com/2009/01/23/nearly-live-tiles/</a></p>
]]></content>
  </entry>
  
</feed>
